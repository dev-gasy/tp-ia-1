#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de d√©monstration de l'API de pr√©diction de dur√©e d'invalidit√©
Ce script montre comment utiliser l'API pour pr√©dire la dur√©e d'une invalidit√©.
"""

import json
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Ensure output directory exists
os.makedirs('output', exist_ok=True)

# URL de l'API (lorsqu'elle est lanc√©e localement)
API_URL = "http://localhost:5001"

def test_api_health():
    """V√©rifier si l'API est en cours d'ex√©cution"""
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API en fonctionnement")
            return True
        else:
            print(f"‚ùå API non disponible (code: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† l'API: {str(e)}")
        return False

def get_model_info():
    """Obtenir des informations sur le mod√®le d√©ploy√©"""
    try:
        response = requests.get(f"{API_URL}/model_info")
        if response.status_code == 200:
            model_info = response.json()
            print("\n=== INFORMATIONS SUR LE MOD√àLE ===")
            for key, value in model_info.items():
                print(f"{key}: {value}")
            return model_info
        else:
            print(f"‚ùå Impossible d'obtenir les informations du mod√®le (code: {response.status_code})")
            return None
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return None

def predict_single_case(case_data):
    """
    Pr√©dire la classe d'un cas d'invalidit√©
    
    Args:
        case_data: Dictionnaire avec les caract√©ristiques du cas
        
    Returns:
        R√©sultat de la pr√©diction
    """
    try:
        response = requests.post(
            f"{API_URL}/predict",
            json={"data": case_data}
        )
        
        if response.status_code == 200:
            result = response.json()
            return result
        else:
            print(f"‚ùå Erreur lors de la pr√©diction (code: {response.status_code})")
            print(response.text)
            return None
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return None

def display_prediction_result(result, case_data):
    """Afficher le r√©sultat de la pr√©diction de mani√®re format√©e"""
    if not result:
        return
    
    print("\n=== R√âSULTAT DE LA PR√âDICTION ===")
    
    # Afficher les caract√©ristiques du cas
    print("\nCaract√©ristiques du cas:")
    for key, value in case_data.items():
        print(f"- {key}: {value}")
    
    # Afficher la pr√©diction
    prediction = result.get("prediction")
    probability = result.get("probability", 0) * 100
    
    print("\nPr√©diction:")
    if prediction == 1:
        print(f"üî¥ Cas LONG (> 180 jours) - Confiance: {probability:.2f}%")
        print("üìã Action recommand√©e: Attribuer √† un employ√© EXP√âRIMENT√â")
    else:
        print(f"üü¢ Cas COURT (‚â§ 180 jours) - Confiance: {100-probability:.2f}%")
        print("üìã Action recommand√©e: Attribuer √† un employ√© PEU EXP√âRIMENT√â")
    
    # Cr√©er une visualisation de la pr√©diction
    plt.figure(figsize=(10, 3))
    categories = ['Court (‚â§ 180 jours)', 'Long (> 180 jours)']
    probabilities = [100-probability, probability]
    colors = ['lightgreen', 'lightcoral']
    
    # Afficher les probabilit√©s
    ax = sns.barplot(x=categories, y=probabilities, palette=colors)
    
    # Ajouter une ligne horizontale √† 50%
    plt.axhline(y=50, color='black', linestyle='--', alpha=0.7)
    
    # Personnaliser le graphique
    plt.ylim(0, 100)
    plt.ylabel('Probabilit√© (%)')
    plt.title('Probabilit√© de la dur√©e d\'invalidit√©')
    
    # Ajouter les valeurs sur les barres
    for i, p in enumerate(ax.patches):
        ax.annotate(f'{p.get_height():.1f}%', 
                    (p.get_x() + p.get_width() / 2., p.get_height()), 
                    ha = 'center', va = 'bottom',
                    xytext = (0, 5), textcoords = 'offset points')
    
    plt.tight_layout()
    plt.savefig('output/prediction_result.png')
    print("\nüìä Graphique de pr√©diction enregistr√© dans 'output/prediction_result.png'")

def predict_multiple_cases(cases):
    """
    Pr√©dire plusieurs cas et g√©n√©rer un rapport de synth√®se
    
    Args:
        cases: Liste de dictionnaires avec les caract√©ristiques des cas
        
    Returns:
        DataFrame avec les r√©sultats
    """
    results = []
    
    print(f"\nPr√©diction de {len(cases)} cas...")
    
    for i, case in enumerate(cases):
        print(f"Cas {i+1}/{len(cases)}...", end="\r")
        result = predict_single_case(case)
        if result:
            # Ajouter le r√©sultat et les caract√©ristiques du cas
            result_dict = {
                "cas_id": i+1,
                "prediction": "Long (> 180 jours)" if result["prediction"] == 1 else "Court (‚â§ 180 jours)",
                "probabilite": result["probability"],
                "attribution": "Employ√© EXP√âRIMENT√â" if result["prediction"] == 1 else "Employ√© PEU EXP√âRIMENT√â"
            }
            # Ajouter les caract√©ristiques du cas
            result_dict.update(case)
            results.append(result_dict)
    
    print(f"‚úÖ Pr√©diction de {len(results)}/{len(cases)} cas termin√©e")
    
    # Cr√©er un DataFrame avec les r√©sultats
    if results:
        results_df = pd.DataFrame(results)
        
        # Enregistrer les r√©sultats au format CSV
        results_df.to_csv('output/multiple_predictions.csv', index=False)
        print("üìÑ R√©sultats enregistr√©s dans 'output/multiple_predictions.csv'")
        
        # Cr√©er une visualisation des attributions
        plt.figure(figsize=(10, 6))
        attribution_counts = results_df['attribution'].value_counts()
        colors = ['lightcoral' if 'EXP√âRIMENT√â' in x else 'lightgreen' for x in attribution_counts.index]
        attribution_counts.plot(kind='bar', color=colors)
        plt.title("R√©partition des attributions")
        plt.ylabel("Nombre de cas")
        plt.xlabel("Type d'attribution")
        plt.tight_layout()
        plt.savefig('output/attribution_distribution.png')
        print("üìä Distribution des attributions enregistr√©e dans 'output/attribution_distribution.png'")
        
        return results_df
    
    return None

def main():
    """Fonction principale de d√©monstration"""
    print("\n====================================")
    print("D√âMONSTRATEUR D'API DE PR√âDICTION")
    print("====================================\n")
    
    # V√©rifier si l'API est en cours d'ex√©cution
    if not test_api_health():
        print("\n‚ö†Ô∏è L'API n'est pas accessible. Veuillez lancer le script model_deployment.py d'abord.")
        print("    Commande: python scripts/model_deployment.py")
        return
    
    # Obtenir des informations sur le mod√®le
    model_info = get_model_info()
    
    # Exemple de cas d'invalidit√© (courte dur√©e)
    cas_court = {
        "Age": 35,
        "Sexe": "M",
        "Code_Emploi": 2,
        "Salaire_Annuel": 45000,
        "Duree_Delai_Attente": 30,
        "Description_Invalidite": "FRACTURE JAMBE",
        "Mois_Debut_Invalidite": 6,
        "Is_Winter": 0
    }
    
    # Exemple de cas d'invalidit√© (longue dur√©e)
    cas_long = {
        "Age": 58,
        "Sexe": "F",
        "Code_Emploi": 4,
        "Salaire_Annuel": 62000,
        "Duree_Delai_Attente": 119,
        "Description_Invalidite": "CANCER",
        "Mois_Debut_Invalidite": 1,
        "Is_Winter": 1
    }
    
    # Pr√©dire un cas court
    print("\n--- PR√âDICTION D'UN CAS COURT ---")
    result_court = predict_single_case(cas_court)
    display_prediction_result(result_court, cas_court)
    
    # Pr√©dire un cas long
    print("\n--- PR√âDICTION D'UN CAS LONG ---")
    result_long = predict_single_case(cas_long)
    display_prediction_result(result_long, cas_long)
    
    # Pr√©dire plusieurs cas
    print("\n--- PR√âDICTION DE PLUSIEURS CAS ---")
    
    # G√©n√©rer quelques cas al√©atoires pour la d√©monstration
    import numpy as np
    
    multiple_cases = []
    np.random.seed(42)
    
    for i in range(20):
        # G√©n√©rer al√©atoirement des caract√©ristiques
        age = np.random.randint(25, 65)
        sexe = np.random.choice(["M", "F"])
        code_emploi = np.random.randint(1, 6)
        salaire = np.random.randint(30000, 100000)
        delai = np.random.choice([30, 60, 90, 119])
        mois = np.random.randint(1, 13)
        is_winter = 1 if mois in [12, 1, 2, 3] else 0
        
        # Liste de descriptions possibles
        descriptions = [
            "DEPRESSION", "ANXIETE", "FRACTURE", "CANCER", 
            "MAL DE DOS", "CHIRURGIE", "ACCIDENT", "BURN OUT"
        ]
        description = np.random.choice(descriptions)
        
        # Cr√©er le cas
        case = {
            "Age": age,
            "Sexe": sexe,
            "Code_Emploi": code_emploi,
            "Salaire_Annuel": salaire,
            "Duree_Delai_Attente": delai,
            "Description_Invalidite": description,
            "Mois_Debut_Invalidite": mois,
            "Is_Winter": is_winter
        }
        
        multiple_cases.append(case)
    
    # Pr√©dire les cas multiples
    results_df = predict_multiple_cases(multiple_cases)
    
    if results_df is not None:
        print("\n=== R√âSUM√â DES PR√âDICTIONS MULTIPLES ===")
        print(f"Nombre total de cas: {len(results_df)}")
        prediction_counts = results_df['prediction'].value_counts()
        print("\nR√©partition des pr√©dictions:")
        for label, count in prediction_counts.items():
            print(f"- {label}: {count} cas ({count/len(results_df)*100:.1f}%)")

    print("\n====================================")
    print("FIN DE LA D√âMONSTRATION")
    print("====================================")

if __name__ == "__main__":
    main() 